//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TaxiService.UserService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://domain.userservice.th08.nl")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateOfBirthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SurnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateOfBirth {
            get {
                return this.DateOfBirthField;
            }
            set {
                if ((this.DateOfBirthField.Equals(value) != true)) {
                    this.DateOfBirthField = value;
                    this.RaisePropertyChanged("DateOfBirth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Firstname {
            get {
                return this.FirstnameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstnameField, value) != true)) {
                    this.FirstnameField = value;
                    this.RaisePropertyChanged("Firstname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNumberField, value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sex {
            get {
                return this.SexField;
            }
            set {
                if ((object.ReferenceEquals(this.SexField, value) != true)) {
                    this.SexField = value;
                    this.RaisePropertyChanged("Sex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Surname {
            get {
                return this.SurnameField;
            }
            set {
                if ((object.ReferenceEquals(this.SurnameField, value) != true)) {
                    this.SurnameField = value;
                    this.RaisePropertyChanged("Surname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://userservice.th08.nl/", ConfigurationName="UserService.UserService")]
    public interface UserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://userservice.th08.nl/UserService/Register", ReplyAction="http://userservice.th08.nl/UserService/RegisterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ServiceModel.FaultException), Action="http://userservice.th08.nl/UserService/RegisterFaultExceptionFault", Name="FaultException", Namespace="http://schemas.datacontract.org/2004/07/System.ServiceModel")]
        string Register(TaxiService.UserService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://userservice.th08.nl/UserService/Register", ReplyAction="http://userservice.th08.nl/UserService/RegisterResponse")]
        System.Threading.Tasks.Task<string> RegisterAsync(TaxiService.UserService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://userservice.th08.nl/UserService/IsUsernameAvailable", ReplyAction="http://userservice.th08.nl/UserService/IsUsernameAvailableResponse")]
        bool IsUsernameAvailable(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://userservice.th08.nl/UserService/IsUsernameAvailable", ReplyAction="http://userservice.th08.nl/UserService/IsUsernameAvailableResponse")]
        System.Threading.Tasks.Task<bool> IsUsernameAvailableAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://userservice.th08.nl/UserService/IsValid", ReplyAction="http://userservice.th08.nl/UserService/IsValidResponse")]
        bool IsValid(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://userservice.th08.nl/UserService/IsValid", ReplyAction="http://userservice.th08.nl/UserService/IsValidResponse")]
        System.Threading.Tasks.Task<bool> IsValidAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://userservice.th08.nl/UserService/Login", ReplyAction="http://userservice.th08.nl/UserService/LoginResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ServiceModel.FaultException), Action="http://userservice.th08.nl/UserService/LoginFaultExceptionFault", Name="FaultException", Namespace="http://schemas.datacontract.org/2004/07/System.ServiceModel")]
        string Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://userservice.th08.nl/UserService/Login", ReplyAction="http://userservice.th08.nl/UserService/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://userservice.th08.nl/UserService/GetUser", ReplyAction="http://userservice.th08.nl/UserService/GetUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ServiceModel.FaultException), Action="http://userservice.th08.nl/UserService/GetUserFaultExceptionFault", Name="FaultException", Namespace="http://schemas.datacontract.org/2004/07/System.ServiceModel")]
        TaxiService.UserService.User GetUser(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://userservice.th08.nl/UserService/GetUser", ReplyAction="http://userservice.th08.nl/UserService/GetUserResponse")]
        System.Threading.Tasks.Task<TaxiService.UserService.User> GetUserAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://userservice.th08.nl/UserService/Edit", ReplyAction="http://userservice.th08.nl/UserService/EditResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ServiceModel.FaultException), Action="http://userservice.th08.nl/UserService/EditFaultExceptionFault", Name="FaultException", Namespace="http://schemas.datacontract.org/2004/07/System.ServiceModel")]
        bool Edit(string token, TaxiService.UserService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://userservice.th08.nl/UserService/Edit", ReplyAction="http://userservice.th08.nl/UserService/EditResponse")]
        System.Threading.Tasks.Task<bool> EditAsync(string token, TaxiService.UserService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://userservice.th08.nl/UserService/Logout", ReplyAction="http://userservice.th08.nl/UserService/LogoutResponse")]
        void Logout(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://userservice.th08.nl/UserService/Logout", ReplyAction="http://userservice.th08.nl/UserService/LogoutResponse")]
        System.Threading.Tasks.Task LogoutAsync(string token);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface UserServiceChannel : TaxiService.UserService.UserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<TaxiService.UserService.UserService>, TaxiService.UserService.UserService {
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Register(TaxiService.UserService.User user) {
            return base.Channel.Register(user);
        }
        
        public System.Threading.Tasks.Task<string> RegisterAsync(TaxiService.UserService.User user) {
            return base.Channel.RegisterAsync(user);
        }
        
        public bool IsUsernameAvailable(string username) {
            return base.Channel.IsUsernameAvailable(username);
        }
        
        public System.Threading.Tasks.Task<bool> IsUsernameAvailableAsync(string username) {
            return base.Channel.IsUsernameAvailableAsync(username);
        }
        
        public bool IsValid(string token) {
            return base.Channel.IsValid(token);
        }
        
        public System.Threading.Tasks.Task<bool> IsValidAsync(string token) {
            return base.Channel.IsValidAsync(token);
        }
        
        public string Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public TaxiService.UserService.User GetUser(string token) {
            return base.Channel.GetUser(token);
        }
        
        public System.Threading.Tasks.Task<TaxiService.UserService.User> GetUserAsync(string token) {
            return base.Channel.GetUserAsync(token);
        }
        
        public bool Edit(string token, TaxiService.UserService.User user) {
            return base.Channel.Edit(token, user);
        }
        
        public System.Threading.Tasks.Task<bool> EditAsync(string token, TaxiService.UserService.User user) {
            return base.Channel.EditAsync(token, user);
        }
        
        public void Logout(string token) {
            base.Channel.Logout(token);
        }
        
        public System.Threading.Tasks.Task LogoutAsync(string token) {
            return base.Channel.LogoutAsync(token);
        }
    }
}
