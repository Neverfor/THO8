//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TaxiService.Team2 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://userservice.th08.nl/", ConfigurationName="Team2.UserService")]
    public interface UserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://userservice.th08.nl/UserService/Register", ReplyAction="http://userservice.th08.nl/UserService/RegisterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ServiceModel.FaultException), Action="http://userservice.th08.nl/UserService/RegisterFaultExceptionFault", Name="FaultException", Namespace="http://schemas.datacontract.org/2004/07/System.ServiceModel")]
        string Register(To8Libraries.Team2.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://userservice.th08.nl/UserService/Register", ReplyAction="http://userservice.th08.nl/UserService/RegisterResponse")]
        System.Threading.Tasks.Task<string> RegisterAsync(To8Libraries.Team2.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://userservice.th08.nl/UserService/IsUsernameAvailable", ReplyAction="http://userservice.th08.nl/UserService/IsUsernameAvailableResponse")]
        bool IsUsernameAvailable(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://userservice.th08.nl/UserService/IsUsernameAvailable", ReplyAction="http://userservice.th08.nl/UserService/IsUsernameAvailableResponse")]
        System.Threading.Tasks.Task<bool> IsUsernameAvailableAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://userservice.th08.nl/UserService/IsValid", ReplyAction="http://userservice.th08.nl/UserService/IsValidResponse")]
        bool IsValid(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://userservice.th08.nl/UserService/IsValid", ReplyAction="http://userservice.th08.nl/UserService/IsValidResponse")]
        System.Threading.Tasks.Task<bool> IsValidAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://userservice.th08.nl/UserService/Login", ReplyAction="http://userservice.th08.nl/UserService/LoginResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ServiceModel.FaultException), Action="http://userservice.th08.nl/UserService/LoginFaultExceptionFault", Name="FaultException", Namespace="http://schemas.datacontract.org/2004/07/System.ServiceModel")]
        string Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://userservice.th08.nl/UserService/Login", ReplyAction="http://userservice.th08.nl/UserService/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://userservice.th08.nl/UserService/GetUser", ReplyAction="http://userservice.th08.nl/UserService/GetUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ServiceModel.FaultException), Action="http://userservice.th08.nl/UserService/GetUserFaultExceptionFault", Name="FaultException", Namespace="http://schemas.datacontract.org/2004/07/System.ServiceModel")]
        To8Libraries.Team2.User GetUser(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://userservice.th08.nl/UserService/GetUser", ReplyAction="http://userservice.th08.nl/UserService/GetUserResponse")]
        System.Threading.Tasks.Task<To8Libraries.Team2.User> GetUserAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://userservice.th08.nl/UserService/Edit", ReplyAction="http://userservice.th08.nl/UserService/EditResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ServiceModel.FaultException), Action="http://userservice.th08.nl/UserService/EditFaultExceptionFault", Name="FaultException", Namespace="http://schemas.datacontract.org/2004/07/System.ServiceModel")]
        bool Edit(string token, To8Libraries.Team2.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://userservice.th08.nl/UserService/Edit", ReplyAction="http://userservice.th08.nl/UserService/EditResponse")]
        System.Threading.Tasks.Task<bool> EditAsync(string token, To8Libraries.Team2.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://userservice.th08.nl/UserService/Logout", ReplyAction="http://userservice.th08.nl/UserService/LogoutResponse")]
        void Logout(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://userservice.th08.nl/UserService/Logout", ReplyAction="http://userservice.th08.nl/UserService/LogoutResponse")]
        System.Threading.Tasks.Task LogoutAsync(string token);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface UserServiceChannel : TaxiService.Team2.UserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<TaxiService.Team2.UserService>, TaxiService.Team2.UserService {
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Register(To8Libraries.Team2.User user) {
            return base.Channel.Register(user);
        }
        
        public System.Threading.Tasks.Task<string> RegisterAsync(To8Libraries.Team2.User user) {
            return base.Channel.RegisterAsync(user);
        }
        
        public bool IsUsernameAvailable(string username) {
            return base.Channel.IsUsernameAvailable(username);
        }
        
        public System.Threading.Tasks.Task<bool> IsUsernameAvailableAsync(string username) {
            return base.Channel.IsUsernameAvailableAsync(username);
        }
        
        public bool IsValid(string token) {
            return base.Channel.IsValid(token);
        }
        
        public System.Threading.Tasks.Task<bool> IsValidAsync(string token) {
            return base.Channel.IsValidAsync(token);
        }
        
        public string Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public To8Libraries.Team2.User GetUser(string token) {
            return base.Channel.GetUser(token);
        }
        
        public System.Threading.Tasks.Task<To8Libraries.Team2.User> GetUserAsync(string token) {
            return base.Channel.GetUserAsync(token);
        }
        
        public bool Edit(string token, To8Libraries.Team2.User user) {
            return base.Channel.Edit(token, user);
        }
        
        public System.Threading.Tasks.Task<bool> EditAsync(string token, To8Libraries.Team2.User user) {
            return base.Channel.EditAsync(token, user);
        }
        
        public void Logout(string token) {
            base.Channel.Logout(token);
        }
        
        public System.Threading.Tasks.Task LogoutAsync(string token) {
            return base.Channel.LogoutAsync(token);
        }
    }
}
